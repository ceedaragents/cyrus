import type {
	LinearAgentSessionCreatedWebhook,
	LinearAgentSessionPromptedWebhook,
	LinearIssueAssignedWebhook,
	LinearIssueCommentMentionWebhook,
	LinearIssueNewCommentWebhook,
} from "cyrus-core";

/**
 * Mock Linear webhook payloads for testing
 */

export const mockIssueAssignedWebhook: LinearIssueAssignedWebhook = {
	type: "AppUserNotification",
	action: "issueAssignedToYou",
	createdAt: "2024-01-15T10:00:00.000Z",
	organizationId: "org-123",
	oauthClientId: "client-123",
	appUserId: "user-123",
	notification: {
		id: "notif-1",
		type: "issueAssignedToYou",
		createdAt: "2024-01-15T10:00:00.000Z",
		updatedAt: "2024-01-15T10:00:00.000Z",
		archivedAt: null,
		actorId: "actor-1",
		externalUserActorId: null,
		userId: "user-123",
		issueId: "issue-1",
		issue: {
			id: "issue-1",
			title: "Test Issue Assignment",
			teamId: "team-1",
			team: {
				id: "team-1",
				key: "TEST",
				name: "Test Team",
			},
			identifier: "TEST-1",
			url: "https://linear.app/test/issue/TEST-1",
		},
		actor: {
			id: "actor-1",
			name: "Test Actor",
			email: "actor@test.com",
			url: "https://linear.app/test/user/actor-1",
		},
	},
	webhookTimestamp: 1705314000000,
	webhookId: "webhook-1",
};

export const mockIssueNewCommentWebhook: LinearIssueNewCommentWebhook = {
	type: "AppUserNotification",
	action: "issueNewComment",
	createdAt: "2024-01-15T10:05:00.000Z",
	organizationId: "org-123",
	oauthClientId: "client-123",
	appUserId: "user-123",
	notification: {
		id: "notif-2",
		type: "issueNewComment",
		createdAt: "2024-01-15T10:05:00.000Z",
		updatedAt: "2024-01-15T10:05:00.000Z",
		archivedAt: null,
		actorId: "actor-1",
		externalUserActorId: null,
		userId: "user-123",
		issueId: "issue-1",
		commentId: "comment-1",
		issue: {
			id: "issue-1",
			title: "Test Issue",
			teamId: "team-1",
			team: {
				id: "team-1",
				key: "TEST",
				name: "Test Team",
			},
			identifier: "TEST-1",
			url: "https://linear.app/test/issue/TEST-1",
		},
		comment: {
			id: "comment-1",
			body: "This is a test comment",
			userId: "actor-1",
			issueId: "issue-1",
		},
		actor: {
			id: "actor-1",
			name: "Test Actor",
			email: "actor@test.com",
			url: "https://linear.app/test/user/actor-1",
		},
	},
	webhookTimestamp: 1705314300000,
	webhookId: "webhook-2",
};

export const mockIssueCommentMentionWebhook: LinearIssueCommentMentionWebhook =
	{
		type: "AppUserNotification",
		action: "issueCommentMention",
		createdAt: "2024-01-15T10:10:00.000Z",
		organizationId: "org-123",
		oauthClientId: "client-123",
		appUserId: "user-123",
		notification: {
			id: "notif-3",
			type: "issueCommentMention",
			createdAt: "2024-01-15T10:10:00.000Z",
			updatedAt: "2024-01-15T10:10:00.000Z",
			archivedAt: null,
			actorId: "actor-1",
			externalUserActorId: null,
			userId: "user-123",
			issueId: "issue-1",
			commentId: "comment-2",
			issue: {
				id: "issue-1",
				title: "Test Issue",
				teamId: "team-1",
				team: {
					id: "team-1",
					key: "TEST",
					name: "Test Team",
				},
				identifier: "TEST-1",
				url: "https://linear.app/test/issue/TEST-1",
			},
			comment: {
				id: "comment-2",
				body: "@cyrus please help with this",
				userId: "actor-1",
				issueId: "issue-1",
			},
			actor: {
				id: "actor-1",
				name: "Test Actor",
				email: "actor@test.com",
				url: "https://linear.app/test/user/actor-1",
			},
		},
		webhookTimestamp: 1705314600000,
		webhookId: "webhook-3",
	};

export const mockAgentSessionCreatedWebhook: LinearAgentSessionCreatedWebhook =
	{
		type: "AgentSessionEvent",
		action: "created",
		createdAt: "2024-01-15T10:15:00.000Z",
		organizationId: "org-123",
		oauthClientId: "client-123",
		appUserId: "user-123",
		agentSession: {
			id: "session-1",
			createdAt: "2024-01-15T10:15:00.000Z",
			updatedAt: "2024-01-15T10:15:00.000Z",
			archivedAt: null,
			creatorId: "actor-1",
			appUserId: "user-123",
			commentId: "comment-3",
			issueId: "issue-1",
			status: "pending",
			startedAt: null,
			endedAt: null,
			type: "commentThread",
			summary: null,
			sourceMetadata: null,
			organizationId: "org-123",
			creator: {
				id: "actor-1",
				name: "Test Actor",
				email: "actor@test.com",
				avatarUrl: "https://avatar.url",
				url: "https://linear.app/test/user/actor-1",
			},
			comment: {
				id: "comment-3",
				body: "Create a new agent session",
				userId: "actor-1",
				issueId: "issue-1",
			},
			issue: {
				id: "issue-1",
				title: "Test Issue",
				teamId: "team-1",
				team: {
					id: "team-1",
					key: "TEST",
					name: "Test Team",
				},
				identifier: "TEST-1",
				url: "https://linear.app/test/issue/TEST-1",
			},
		},
		webhookTimestamp: "1705314900000",
		webhookId: "webhook-4",
	};

export const mockAgentSessionPromptedWebhook: LinearAgentSessionPromptedWebhook =
	{
		type: "AgentSessionEvent",
		action: "prompted",
		createdAt: "2024-01-15T10:20:00.000Z",
		organizationId: "org-123",
		oauthClientId: "client-123",
		appUserId: "user-123",
		agentSession: {
			id: "session-1",
			createdAt: "2024-01-15T10:15:00.000Z",
			updatedAt: "2024-01-15T10:20:00.000Z",
			archivedAt: null,
			creatorId: "actor-1",
			appUserId: "user-123",
			commentId: "comment-3",
			issueId: "issue-1",
			status: "active",
			startedAt: "2024-01-15T10:15:00.000Z",
			endedAt: null,
			type: "commentThread",
			summary: null,
			sourceMetadata: null,
			organizationId: "org-123",
			creator: {
				id: "actor-1",
				name: "Test Actor",
				email: "actor@test.com",
				avatarUrl: "https://avatar.url",
				url: "https://linear.app/test/user/actor-1",
			},
			comment: {
				id: "comment-3",
				body: "Create a new agent session",
				userId: "actor-1",
				issueId: "issue-1",
			},
			issue: {
				id: "issue-1",
				title: "Test Issue",
				teamId: "team-1",
				team: {
					id: "team-1",
					key: "TEST",
					name: "Test Team",
				},
				identifier: "TEST-1",
				url: "https://linear.app/test/issue/TEST-1",
			},
		},
		agentActivity: {
			id: "activity-1",
			createdAt: "2024-01-15T10:20:00.000Z",
			updatedAt: "2024-01-15T10:20:00.000Z",
			archivedAt: null,
			agentContextId: null,
			agentSessionId: "session-1",
			sourceCommentId: "comment-4",
			content: {
				type: "prompt",
				body: "Please continue with the implementation",
			},
		},
		webhookTimestamp: "1705315200000",
		webhookId: "webhook-5",
	};
